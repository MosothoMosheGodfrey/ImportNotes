import pyautogui
import time
import subprocess
import os

# Replace this with the path to your Power BI Desktop executable
PBI_DESKTOP_PATH = r"C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe"
# Replace this with the path to your .pbix file
PBIX_FILE_PATH = r"C:\path\to\your\file.pbix"

def open_powerbi(pbix_path):
    print("Opening Power BI Desktop...")
    subprocess.Popen([PBI_DESKTOP_PATH, pbix_path])
    # Wait time for Power BI Desktop to fully load the file
    time.sleep(60)

def refresh_data():
    print("Refreshing data...")
    # Shortcut to refresh data: Ctrl + Alt + F5
    pyautogui.hotkey('ctrl', 'alt', 'f5')
    # Wait time for refresh to complete (this may need to be adjusted)
    time.sleep(300)

def save_file():
    print("Saving file...")
    # Shortcut to save: Ctrl + S
    pyautogui.hotkey('ctrl', 's')
    # Wait a few seconds to ensure the save is completed
    time.sleep(10)

def close_powerbi():
    print("Closing Power BI Desktop...")
    # Close Power BI Desktop using Alt + F4
    pyautogui.hotkey('alt', 'f4')

if __name__ == "__main__":
    try:
        open_powerbi(PBIX_FILE_PATH)
        refresh_data()
        save_file()
        close_powerbi()
        print("Power BI file refreshed and saved successfully.")
    except Exception as e:
        print("An error occurred:", e)





dir /s /b PBIDesktop.exe


import os
import glob

def find_pbi_executable():
    # Define the typical installation paths
    potential_paths = [
        r"C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe",
        r"C:\Program Files\WindowsApps\Microsoft.MicrosoftPowerBIDesktop*\bin\PBIDesktop.exe"
    ]
    
    for path in potential_paths:
        found_files = glob.glob(path)
        if found_files:
            return found_files[0]
    
    return None

pbi_executable_path = find_pbi_executable()

if pbi_executable_path:
    print(f"Power BI Desktop executable found: {pbi_executable_path}")
else:
    print("Power BI Desktop executable not found.")




import os

def find_file(filename, search_path):
    """Search for a file in a given directory tree."""
    for root, dirs, files in os.walk(search_path):
        if filename in files:
            return os.path.join(root, filename)
    return None

# Define the filename to search for
filename = 'PBIDesktop.exe'

# Define the starting points for the search (e.g., all drives on Windows)
search_paths = ['C:\\', 'D:\\', 'E:\\']  # Add more drive letters if necessary

def search_for_executable(filename, search_paths):
    """Search for an executable in multiple paths."""
    for path in search_paths:
        print(f"Searching in {path}...")
        result = find_file(filename, path)
        if result:
            return result
    return None

# Search for the Power BI Desktop executable
executable_path = search_for_executable(filename, search_paths)

if executable_path:
    print(f"Power BI Desktop executable found: {executable_path}")
else:
    print("Power BI Desktop executable not found.")



import os

def find_file(filename, search_path):
    """Search for a file in a given directory tree."""
    for root, dirs, files in os.walk(search_path):
        if filename in files:
            return os.path.join(root, filename)
    return None

# Define the filename to search for
filename = 'PBIDesktop.exe'

# Define the starting points for the search (e.g., all drives on Windows)
search_paths = ['C:\\', 'D:\\', 'E:\\']  # Add more drive letters if necessary

def search_for_executable(filename, search_paths):
    """Search for an executable in multiple paths."""
    for path in search_paths:
        print(f"Searching in {path}...")
        result = find_file(filename, path)
        if result:
            return result
    return None

# Search for the Power BI Desktop executable
executable_path = search_for_executable(filename, search_paths)

if executable_path:
    print(f"Power BI Desktop executable found: {executable_path}")
else:
    print("Power BI Desktop executable not found.")


import pyautogui
import time
import subprocess
import os

# Replace these variables with your values
PBI_DESKTOP_PATH = r"C:\Path\To\Your\PBIDesktop.exe"
PBIX_FILE_PATH = r"C:\Path\To\Your\File.pbix"

def open_powerbi(pbix_path):
    print("Opening Power BI Desktop...")
    subprocess.Popen([PBI_DESKTOP_PATH, pbix_path])
    # Wait time for Power BI Desktop to fully load the file
    time.sleep(60)

def refresh_data():
    print("Refreshing data...")
    # Shortcut to refresh data: Ctrl + Alt + F5
    pyautogui.hotkey('ctrl', 'alt', 'f5')
    # Wait time for refresh to complete (this may need to be adjusted)
    time.sleep(300)

def save_file():
    print("Saving file...")
    # Shortcut to save: Ctrl + S
    pyautogui.hotkey('ctrl', 's')
    # Wait a few seconds to ensure the save is completed
    time.sleep(10)

def close_powerbi():
    print("Closing Power BI Desktop...")
    # Close Power BI Desktop using Alt + F4
    pyautogui.hotkey('alt', 'f4')

if __name__ == "__main__":
    try:
        open_powerbi(PBIX_FILE_PATH)
        refresh_data()
        save_file()
        close_powerbi()
        print("Power BI file refreshed and saved successfully.")
    except Exception as e:
        print("An error occurred:", e)




import requests
import os

# Define variables
report_server_url = "http://your-report-server/reports/api/v2.0"
report_path = "/Path/To/Your/Report.pbix"
folder_path = "/Path/On/Report/Server"
report_name = "YourReportName"
username = "your-username"
password = "your-password"

# Function to get the upload URL
def get_upload_url(report_server_url, folder_path):
    return f"{report_server_url}/Folders{folder_path}/Items"

# Function to upload the report
def upload_report(report_server_url, report_path, folder_path, report_name, username, password):
    upload_url = get_upload_url(report_server_url, folder_path)
    
    with open(report_path, 'rb') as file:
        headers = {
            'Content-Type': 'application/json'
        }
        files = {
            'file': (os.path.basename(report_path), file, 'application/octet-stream')
        }
        data = {
            'Name': report_name,
            'Description': 'Uploaded via Python script',
            'Overwrite': 'true'
        }
        response = requests.post(upload_url, headers=headers, files=files, data=data, auth=(username, password))
        
        if response.status_code == 201:
            print(f"Report uploaded successfully to {folder_path} as {report_name}")
        else:
            print(f"Failed to upload report: {response.status_code} {response.text}")

if __name__ == "__main__":
    upload_report(report_server_url, report_path, folder_path, report_name, username, password)



import subprocess

# Define paths
pbix_path = r"C:\Path\To\Your\File.pbix"
powershell_script_path = r"C:\Path\To\refresh_powerbi.ps1"

# Function to run the PowerShell script
def refresh_powerbi(pbix_path, powershell_script_path):
    try:
        # Construct the PowerShell command
        command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", powershell_script_path, "-pbixPath", pbix_path]
        
        # Run the PowerShell script
        subprocess.run(command, check=True)
        print("Power BI report refreshed and saved successfully.")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    refresh_powerbi(pbix_path, powershell_script_path)
