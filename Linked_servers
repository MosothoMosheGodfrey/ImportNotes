import pyodbc

# Establish a connection to your SQL Server instance
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password')

# Create a cursor object to execute SQL queries
cursor = conn.cursor()

# Example: Query to retrieve linked server databases
cursor.execute("SELECT name FROM sys.servers WHERE is_linked = 1")

# Fetch the results and print them
linked_servers = cursor.fetchall()
print("Linked Servers:")
for server in linked_servers:
    print(server[0])

# Example: Query to retrieve tables and columns for a specific linked server database
linked_server_name = 'your_linked_server_name'
linked_database_name = 'your_linked_database_name'
cursor.execute(f"SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE FROM {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.COLUMNS")

# Fetch the results and print them
columns_info = cursor.fetchall()
print("\nTable Columns:")
for column_info in columns_info:
    print("Table:", column_info[0], "- Column:", column_info[1], "- Data Type:", column_info[2])

# Close the cursor and connection
cursor.close()
conn.close()





import pyodbc
import pandas as pd

# Establish a connection to your SQL Server instance
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password')

# Example: Query to retrieve tables and columns for a specific linked server database with additional details
linked_server_name = 'your_linked_server_name'
linked_database_name = 'your_linked_database_name'
query = f"""
    SELECT 
        TABLE_CATALOG, 
        TABLE_SCHEMA, 
        TABLE_NAME, 
        COLUMN_NAME, 
        ORDINAL_POSITION, 
        COLUMN_DEFAULT, 
        IS_NULLABLE, 
        DATA_TYPE, 
        CHARACTER_MAXIMUM_LENGTH, 
        NUMERIC_PRECISION, 
        NUMERIC_SCALE
    FROM 
    (
        SELECT 
            TABLE_CATALOG, 
            TABLE_SCHEMA, 
            TABLE_NAME, 
            COLUMN_NAME, 
            ORDINAL_POSITION, 
            COLUMN_DEFAULT, 
            IS_NULLABLE, 
            DATA_TYPE, 
            CHARACTER_MAXIMUM_LENGTH, 
            NUMERIC_PRECISION, 
            NUMERIC_SCALE
        FROM 
            {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.COLUMNS
        WHERE
            TABLE_NAME IN (
                SELECT 
                    TABLE_NAME 
                FROM 
                    {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.TABLES 
                WHERE 
                    TABLE_TYPE = 'BASE TABLE'
                
                UNION
                
                SELECT 
                    TABLE_NAME 
                FROM 
                    {linked_server_name}.{linked_database_name}.sys.objects 
                WHERE 
                    type = 'V'  -- View
            )
    ) AS AllColumns
"""

# Create DataFrame from query result
df = pd.read_sql_query(query, conn)

# Close the connection
conn.close()

# Display the DataFrame
print(df)



import pyodbc

# Establish a connection to your SQL Server instance
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password')

# Create a cursor object to execute SQL queries
cursor = conn.cursor()

# Example: Query to retrieve tables and columns for a specific linked server database with additional details
linked_server_name = 'your_linked_server_name'
linked_database_name = 'your_linked_database_name'
cursor.execute(f"""
    SELECT 
        TABLE_CATALOG, 
        TABLE_SCHEMA, 
        TABLE_NAME, 
        COLUMN_NAME, 
        ORDINAL_POSITION, 
        COLUMN_DEFAULT, 
        IS_NULLABLE, 
        DATA_TYPE, 
        CHARACTER_MAXIMUM_LENGTH, 
        NUMERIC_PRECISION, 
        NUMERIC_SCALE
    FROM 
        {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.COLUMNS
""")

# Fetch the results and print them
columns_info = cursor.fetchall()
print("Table Columns:")
for column_info in columns_info:
    table_catalog, table_schema, table_name, column_name, ordinal_position, column_default, is_nullable, data_type, character_maximum_length, numeric_precision, numeric_scale = column_info
    print(f"Table Catalog: {table_catalog}, Table Schema: {table_schema}, Table Name: {table_name}, Column Name: {column_name}, Ordinal Position: {ordinal_position}, Column Default: {column_default}, Is Nullable: {is_nullable}, Data Type: {data_type}, Character Maximum Length: {character_maximum_length}, Numeric Precision: {numeric_precision}, Numeric Scale: {numeric_scale}")

# Close the cursor and connection
cursor.close()
conn.close()




import pyodbc
import pandas as pd

# Establish a connection to your SQL Server instance
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password')

# Example: Query to retrieve tables and columns for a specific linked server database with additional details
linked_server_name = 'your_linked_server_name'
linked_database_name = 'your_linked_database_name'
query = f"""
    SELECT 
        TABLE_CATALOG, 
        TABLE_SCHEMA, 
        TABLE_NAME, 
        COLUMN_NAME, 
        ORDINAL_POSITION, 
        COLUMN_DEFAULT, 
        IS_NULLABLE, 
        DATA_TYPE, 
        CHARACTER_MAXIMUM_LENGTH, 
        NUMERIC_PRECISION, 
        NUMERIC_SCALE
    FROM 
        {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.COLUMNS
"""

# Create DataFrame from query result
df = pd.read_sql_query(query, conn)

# Close the connection
conn.close()

# Display the DataFrame
print(df)


import pyodbc
import pandas as pd

# Establish a connection to your SQL Server instance
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password')

# Example: Query to retrieve all tables including base tables and views
linked_server_name = 'your_linked_server_name'
linked_database_name = 'your_linked_database_name'
query = f"""
    SELECT 
        TABLE_CATALOG, 
        TABLE_SCHEMA, 
        TABLE_NAME,
        'Base Table' AS TABLE_TYPE
    FROM 
        {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.TABLES
    WHERE
        TABLE_TYPE = 'BASE TABLE'
    
    UNION ALL
    
    SELECT 
        TABLE_CATALOG, 
        TABLE_SCHEMA, 
        TABLE_NAME,
        'View' AS TABLE_TYPE
    FROM 
        {linked_server_name}.{linked_database_name}.INFORMATION_SCHEMA.TABLES
    WHERE
        TABLE_TYPE = 'VIEW'
    
    UNION ALL
    
    SELECT
        TABLE_CATALOG,
        TABLE_SCHEMA,
        name AS TABLE_NAME,
        'Base Table' AS TABLE_TYPE
    FROM
        {linked_server_name}.{linked_database_name}.sys.objects
    WHERE
        type = 'U'  -- User-defined table (base table)
"""

# Create DataFrame from query result
df = pd.read_sql_query(query, conn)

# Close the connection
conn.close()

# Display the DataFrame
print(df)

